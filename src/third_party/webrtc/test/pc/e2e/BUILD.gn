# Copyright (c) 2019 The WebRTC project authors. All Rights Reserved.
#
# Use of this source code is governed by a BSD-style license
# that can be found in the LICENSE file in the root of the source
# tree. An additional intellectual property rights grant can be found
# in the file PATENTS.  All contributing project authors may
# be found in the AUTHORS file in the root of the source tree.

import("../../../webrtc.gni")

group("e2e") {
  testonly = true

  deps = [
    ":default_encoded_image_id_injector",
    ":encoded_image_id_injector_api",
    ":example_video_quality_analyzer",
    ":id_generator",
    ":quality_analyzing_video_decoder",
    ":quality_analyzing_video_encoder",
    ":single_process_encoded_image_id_injector",
  ]
  if (rtc_include_tests) {
    deps += [ ":video_quality_analyzer_injection_helper" ]
  }
}

if (rtc_include_tests) {
  group("e2e_unittests") {
    testonly = true

    deps = [
      ":default_encoded_image_id_injector_unittest",
      ":single_process_encoded_image_id_injector_unittest",
    ]
  }
}

rtc_source_set("encoded_image_id_injector_api") {
  visibility = [ "*" ]
  sources = [
    "analyzer/video/encoded_image_id_injector.h",
  ]

  deps = [
    "../../../api/video:encoded_image",
  ]
}

rtc_source_set("default_encoded_image_id_injector") {
  visibility = [ "*" ]
  sources = [
    "analyzer/video/default_encoded_image_id_injector.cc",
    "analyzer/video/default_encoded_image_id_injector.h",
  ]

  deps = [
    ":encoded_image_id_injector_api",
    "../../../api/video:encoded_image",
    "../../../rtc_base:checks",
    "../../../rtc_base:criticalsection",
    "//third_party/abseil-cpp/absl/memory:memory",
  ]
}

rtc_source_set("single_process_encoded_image_id_injector") {
  visibility = [ "*" ]
  sources = [
    "analyzer/video/single_process_encoded_image_id_injector.cc",
    "analyzer/video/single_process_encoded_image_id_injector.h",
  ]

  deps = [
    ":encoded_image_id_injector_api",
    "../../../api/video:encoded_image",
    "../../../rtc_base:checks",
    "../../../rtc_base:criticalsection",
    "//third_party/abseil-cpp/absl/memory:memory",
  ]
}

rtc_source_set("id_generator") {
  visibility = [ "*" ]
  sources = [
    "analyzer/video/id_generator.cc",
    "analyzer/video/id_generator.h",
  ]
  deps = []
}

rtc_source_set("quality_analyzing_video_decoder") {
  visibility = [ "*" ]
  sources = [
    "analyzer/video/quality_analyzing_video_decoder.cc",
    "analyzer/video/quality_analyzing_video_decoder.h",
  ]
  deps = [
    ":encoded_image_id_injector_api",
    ":id_generator",
    "../../../api/video:encoded_image",
    "../../../api/video:video_frame",
    "../../../api/video_codecs:video_codecs_api",
    "../../../modules/video_coding:video_codec_interface",
    "../../../rtc_base:criticalsection",
    "../../../rtc_base:logging",
    "api:video_quality_analyzer_api",
    "//third_party/abseil-cpp/absl/memory:memory",
    "//third_party/abseil-cpp/absl/types:optional",
  ]
}

rtc_source_set("quality_analyzing_video_encoder") {
  visibility = [ "*" ]
  sources = [
    "analyzer/video/quality_analyzing_video_encoder.cc",
    "analyzer/video/quality_analyzing_video_encoder.h",
  ]
  deps = [
    ":encoded_image_id_injector_api",
    ":id_generator",
    "../../../api/video:encoded_image",
    "../../../api/video:video_frame",
    "../../../api/video_codecs:video_codecs_api",
    "../../../modules/video_coding:video_codec_interface",
    "../../../rtc_base:criticalsection",
    "../../../rtc_base:logging",
    "api:video_quality_analyzer_api",
    "//third_party/abseil-cpp/absl/memory:memory",
  ]
}

if (rtc_include_tests) {
  rtc_source_set("video_quality_analyzer_injection_helper") {
    visibility = [ "*" ]
    testonly = true
    sources = [
      "analyzer/video/video_quality_analyzer_injection_helper.cc",
      "analyzer/video/video_quality_analyzer_injection_helper.h",
    ]
    deps = [
      ":encoded_image_id_injector_api",
      ":id_generator",
      ":quality_analyzing_video_decoder",
      ":quality_analyzing_video_encoder",
      "../../../api/video:video_frame",
      "../../../api/video_codecs:video_codecs_api",
      "../../../test:video_test_common",
      "../../../test:video_test_support",
      "api:video_quality_analyzer_api",
      "//third_party/abseil-cpp/absl/memory:memory",
    ]
  }

  rtc_source_set("single_process_encoded_image_id_injector_unittest") {
    testonly = true
    sources = [
      "analyzer/video/single_process_encoded_image_id_injector_unittest.cc",
    ]
    deps = [
      ":single_process_encoded_image_id_injector",
      "../../../api/video:encoded_image",
      "../../../rtc_base:rtc_base_approved",
      "../../../test:test_support",
    ]
  }

  rtc_source_set("default_encoded_image_id_injector_unittest") {
    testonly = true
    sources = [
      "analyzer/video/default_encoded_image_id_injector_unittest.cc",
    ]
    deps = [
      ":default_encoded_image_id_injector",
      "../../../api/video:encoded_image",
      "../../../rtc_base:rtc_base_approved",
      "../../../test:test_support",
    ]
  }
}

rtc_source_set("example_video_quality_analyzer") {
  visibility = [ "*" ]
  testonly = true
  sources = [
    "analyzer/video/example_video_quality_analyzer.cc",
    "analyzer/video/example_video_quality_analyzer.h",
  ]

  deps = [
    "../../../api/video:encoded_image",
    "../../../api/video:video_frame",
    "../../../rtc_base:criticalsection",
    "../../../rtc_base:logging",
    "api:video_quality_analyzer_api",
  ]
}
